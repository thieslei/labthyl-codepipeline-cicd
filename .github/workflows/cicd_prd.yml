name: "Terraform"

on:
  push: { branches: [main] }
  #pull_request: { branches: [main] }

env:
  TF_WORKING_DIR: ./infradeployment
  TF_ENVIRONMENTS_TFVARS_PATH: ./env/
  TF_WORKSPACE: PRD
  
jobs:
  terraform:
    name: "Terraform Deployment"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
                     
      - name: AWS IAM Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Format
        id: tf_fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: tf_init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Terraform Validate
        id: tf_validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        id: tf_plan
        #if: github.event_name == 'pull_request'
        run: terraform plan -no-color -out=tfplan-$(echo ${GITHUB_SHA} | cut -c1-8) -var-file=${{ env.TF_ENVIRONMENTS_TFVARS_PATH }}${{ env.TF_WORKSPACE }}.tfvars
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: false
      
      - name: Terraform Apply
        id: tf_apply
        if: github.event_name == 'pull_request'
        run: terraform apply -no-color -auto-approve tfplan-$(echo ${GITHUB_SHA} | cut -c1-8)
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: false

#      - name: Terraform Apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#        run: terraform apply -auto-approve